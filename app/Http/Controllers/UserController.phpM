<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use App\Http\Controllers\Controller;
use App\User;
use App\Olddata;
use App\EventCheckOut;
use Spatie\Permission\Models\Role;
use DataTables;
use DB;
use Hash;
use Illuminate\Support\Facades\Mail;
use Rap2hpoutre\FastExcel\FastExcel;
class UserController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $data = User::orderBy('id','DESC')->paginate(5);
        return view('users.index',compact('data'))
            ->with('i', ($request->input('page', 1) - 1) * 5);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $roles = Role::pluck('name','name')->all();
        return view('users.create',compact('roles'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'name' => 'required',
            'email' => 'required|email|unique:users,email',
            'password' => 'required|same:confirm-password',
            'roles' => 'required'
        ]);


        $input = $request->all();
        $input['password'] = Hash::make($input['password']);


        $user = User::create($input);
        $user->assignRole($request->input('roles'));


        return  redirect()->route('users.index')
                        ->with('success','User created successfully');
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $user = User::find($id);
        return view('users.show',compact('user'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $user = User::find($id);
        $roles = Role::pluck('name','name')->all();
        $userRole = $user->roles->pluck('name','name')->all();

        return view('users.edit',compact('user','roles','userRole'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $this->validate($request, [
            'name' => 'required',
            'email' => 'required|email|unique:users,email,'.$id,
            'password' => 'same:confirm-password',
            'roles' => 'required'
        ]);


        $input = $request->all();
        if(!empty($input['password'])){ 
            $input['password'] = Hash::make($input['password']);
        }else{
            $input = array_except($input,array('password'));    
        }


        $user = User::find($id);
        $user->update($input);
        DB::table('model_has_roles')->where('model_id',$id)->delete();


        $user->assignRole($request->input('roles'));


        return redirect()->route('users.index')
                        ->with('success','User updated successfully');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        User::find($id)->delete();
        return redirect()->route('users.index')
                        ->with('success','User deleted successfully');
    }
    
    public function createNewUser(Request $request){
        $input = $request->all();
        if(!empty($input['password'])){ 
            $input['password']  =   Hash::make($input['password']);
        }
        else{
            $input['password']  =   Hash::make($input['name'].'123'); 
        }
        //print_r($input);
        User::create($input);
        return true;
    }

    public function subscriberlist(Request $request)
    {
        if($request->ajax()){
        $data =   DB::table('user_newsletter')->get();
            return DataTables::of($data)
                    ->addIndexColumn()
                    ->make(true);
        }
        return view('admin.newsletter');
    }

    public function import_subscriber_data(Request $request)
    {
        if($request->input('radioName') == 'member'){
            $data     =   User::where('member', '=', 1)->select('name as first_name', 'surname as last_name', 'email')->get();
            if($data->count() > 0){
                $data->toArray();
                foreach($data as $key => $value){
                    $insertData[]   =   [
                                            'first_name'    =>  ucfirst($value['first_name']),
                                            'last_name'     =>  ucfirst($value['last_name']),
                                            'email'         =>  strtolower($value['email']),
                                        ];
                }
                if(!empty($insertData)){
                    $c = 0;
                    foreach($insertData as $key => $insert){
                        if(!DB::table('user_newsletter')->where('email','=', $insert['email'])->first() && filter_var($insert['email'], FILTER_VALIDATE_EMAIL))
                        {
                            DB::table('user_newsletter')->insert($insert);
                            $c++;
                        }
                    }
                }
                if($c){
                    $success    =   '('.$c.') Data Imported successfully';
                }
                else{
                    $success    =   'No new data to import';
                }
                return back()->with('success',$success);
            }
            else{
                return back()->with('error','Data not found on the spreadsheet');
            }
        }
        if($request->input('radioName') == 'sponser'){
            $data     =   User::where('member', '=', 1)->select('name as first_name', 'surname as last_name', 'email')->get();
            if($data->count() > 0){
                $data->toArray();
                foreach($data as $key => $value){
                    $insertData[]   =   [
                                            'first_name'    =>  ucfirst($value['first_name']),
                                            'last_name'     =>  ucfirst($value['last_name']),
                                            'email'         =>  strtolower($value['email']),
                                        ];
                }
                if(!empty($insertData)){
                    $c = 0;
                    foreach($insertData as $key => $insert){
                        if(!DB::table('user_newsletter')->where('email','=', $insert['email'])->first() && filter_var($insert['email'], FILTER_VALIDATE_EMAIL))
                        {
                            DB::table('user_newsletter')->insert($insert);
                            $c++;
                        }
                    }
                }
                if($c){
                    $success    =   '('.$c.') Data Imported successfully';
                }
                else{
                    $success    =   'No new data to import';
                }
                return back()->with('success',$success);
            }
            else{
                return back()->with('error','Data not found on the spreadsheet');
            }
        }
        if($request->input('radioName') == 'advertiser'){
            $data     =   User::where('member', '=', 1)->select('name as first_name', 'surname as last_name', 'email')->get();
            if($data->count() > 0){
                $data->toArray();
                foreach($data as $key => $value){
                    $insertData[]   =   [
                        'first_name'    =>  ucfirst($value['first_name']),
                        'last_name'     =>  ucfirst($value['last_name']),
                        'email'         =>  strtolower($value['email']),
                    ];
                }
                if(!empty($insertData)){
                    $c = 0;
                    foreach($insertData as $key => $insert){
                        if(!DB::table('user_newsletter')->where('email','=', $insert['email'])->first() && filter_var($insert['email'], FILTER_VALIDATE_EMAIL))
                        {
                            DB::table('user_newsletter')->insert($insert);
                            $c++;
                        }
                    }
                }
                if($c){
                    $success    =   '('.$c.') Data Imported successfully';
                }
                else{
                    $success    =   'No new data to import';
                }
                return back()->with('success',$success);
            }
            else{
                return back()->with('error','Data not found on the spreadsheet');
            }
        }
        if($request->input('radioName') == 'old'){
            if($request->input('dateFrom') && $request->input('dateTo')){

                $data     =   Olddata::where('email', '!=', '')
                                ->whereBetween('year_left', [$request->input('dateFrom'), $request->input('dateTo')])
                                ->select('first_name', 'surname as last_name', 'email', 'year_left')
                                ->get();
                if($data->count() > 0){
                    $data->toArray();                
                    foreach($data as $key => $value){
                        $insertData[]   =   [
                                                'first_name'    =>  ucfirst($value['first_name']),
                                                'last_name'     =>  ucfirst($value['last_name']),
                                                'email'         =>  strtolower($value['email']),
                                                'year_left'     =>  strtolower($value['year_left']),
                                            ];
                    }
                    if(!empty($insertData)){
                        $c  =   0;
                        foreach($insertData as $key => $insert){
                            if(!DB::table('user_newsletter')->where('email','=', $insert['email'])->first() && filter_var($insert['email'], FILTER_VALIDATE_EMAIL))
                            {
                                DB::table('user_newsletter')->insert($insert);
                                $c++;
                            }                        
                        }
                    }
                    if($c){
                        $success    =   '('.$c.') Data Imported successfully';
                    }
                    else{
                        $success    =   'No new data to import';
                    }
                    return back()->with('success',$success);
                }
                else{
                    return back()->with('error','Data not found on the spreadsheet');
                }
            }
            else{
                return back()->with('error','Please add year in field');
            }
        }
        if($request->input('radioName') == 'events'){
            $data     =   EventCheckOut::where('address', '!=', '')->select('name', 'address')->get();
            if($data->count() > 0){
                $data->toArray();
                foreach($data as $key => $value){

                    $name   =   explode(' ', $value['name']);
                    if(count($name) > 1){
                        $firstName      =   $name[0];
                        $lastName       =   $name[1];
                    }
                    else{
                        $firstName      =   $name[0];
                        $lastName       =   '';
                    }

                    $insertData[]   =   [
                                            'first_name'    =>  ucfirst($firstName),
                                            'last_name'     =>  ucfirst($lastName),
                                            'email'         =>  strtolower($value['address'])                                            
                                        ];
                }
                if(!empty($insertData)){
                    $c  =   0;
                    foreach($insertData as $key => $insert){
                        if(!DB::table('user_newsletter')->where('email','=', $insert['email'])->first() && filter_var($insert['email'], FILTER_VALIDATE_EMAIL))
                        {
                            DB::table('user_newsletter')->insert($insert);
                            $c++;
                        }
                    }
                }
                if($c){
                    $success    =   '('.$c.') Data Imported successfully';
                }
                else{
                    $success    =   'No new data to import';
                }
                return back()->with('success',$success);
            }
            else{
                return back()->with('error','Data not found on the spreadsheet');
            }
        }
        $this->validate($request, [
           'select_file'   =>  'required|mimes:xls,xlsx' 
        ]);

        $data = (new FastExcel)->import($request->file('select_file')->getRealPath());

        if($data->count() > 0){
            foreach($data as $key => $value){

                $insertData[]   =   [
                                        'first_name'    =>  $value['first_name'],
                                        'last_name'     =>  $value['last_name'],
                                        'email'         =>  $value['email'],
                                    ];
            }
            //print_r($insertData); die();
            if(!empty($insertData)){
                $c = 0;
                foreach($insertData as $key => $insert){
                    if(!DB::table('user_newsletter')->where('email','=', $insert['email'])->first()){
                        DB::table('user_newsletter')->insert($insert);
                        $c++;
                    }
                }
            }
            if($c){
                $success    =   '('.$c.') Data Imported successfully';
            }
            else{
                $success    =   'No new data to import';
            }
            return back()->with('success',$success);
        }
        else{
            return back()->with('error','Data not found on the spreadsheet');
        }
    }

    public function newsletter()
    {
        return view('admin.sendnewsletter');
    }


    public function send_newsletter(Request $request)
    {
        if($request->input('template') && $request->input('mailSubject') && $request->input('mailBody')){
            $data               =   [];
            $dbData             =   DB::table('user_newsletter')->get();


            $data['sending_id'] =   rand(1000,1000000);
            $data['tmp_id']     =   $request->input('template');
            $data['subject']    =   strip_tags($request->input('mailSubject'));
            $data['body']       =   strip_tags($request->input('mailBody'));

            if($dbData->count() > 0){
                $dbData     =   $dbData->toArray();
                foreach($dbData as $key => $user){
                    $user->subject  =   strip_tags($request->input('mailSubject'));
                    $mail   =   [   
                                    "first_name"    =>  ucfirst($user->first_name),
                                    "last_name"     =>  ucfirst($user->last_name),
                                    "body"          =>  strip_tags($request->input('mailBody'))
                                ];
                    if($request->input('template') == '1'){
                        Mail::send('admin.mail.template_1', $mail, function($message) use($user){
                            $message->to($user->email, 'Belvedere')
                                    ->subject($user->subject);
                            $message->from('noreply@belvedereunion.com','Belvedere');
                        });
                    }
                    else{
                        Mail::send('admin.mail.template_2', $mail, function($message) use($user){
                            $message->to($user->email, 'Belvedere')
                                    ->subject($user->subject);
                            $message->from('noreply@belvedereunion.com','Belvedere');
                        });
                    }
                    $data['newsletter_user_id']     =    $user->id;
                    DB::table('newsletter_logs')->insert($data);
                }
                return back()->with('success','Newsletter sent successfully');
            }
            return back()->with('error','No user found to send newsletter');
        }
        else{
            return back()->with('error','Form validation failed');
        }
    }

    public function newsletter_logs(Request $request)
    {
        if($request->ajax()){
        $data =   DB::table('newsletter_logs')->groupBy(DB::raw('sending_id'))->get();
            return DataTables::of($data)
                    ->addIndexColumn()
                    ->addColumn('action', function($row){
                    $btn    =   '<h5><a href="/newsletterdetails/'. $row->sending_id .'"> <i class="fa fa-pencil" style="color: #28a745;"></i></a>';
                    return $btn;
                    })
                    ->rawColumns(['action'])
                    ->make(true);
        }
        return view('admin.newsletterlogs');
    }

    public function subscription_details(Request $request, $id)
    {
        $data   =   DB::table('newsletter_logs')
                    ->join('user_newsletter', 'user_newsletter.id', '=', 'newsletter_logs.newsletter_user_id')
                    ->where("newsletter_logs.sending_id", '=', $id)
                    ->select('newsletter_logs.*','user_newsletter.first_name','user_newsletter.last_name')
                    // ->get()
                    // ->toArray();
                    ->paginate(1);
        return view('admin.subscription_details',compact('data'));
    }
}
